@model PracticaProgramada1BLL.Dtos.ClienteDto

@{
    ViewData["Title"] = "Editar Cliente";
}

<h2>Editar Cliente</h2>

<form asp-action="Edit" method="post" id="frmCliente" novalidate>
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <input type="hidden" asp-for="Id" />

    <div class="form-group">
        <label asp-for="Nombre"></label>
        <input asp-for="Nombre" class="form-control" required />
        <span asp-validation-for="Nombre" class="text-danger"></span>
    </div>

    <div class="form-group mt-2">
        <label asp-for="Apellido"></label>
        <input asp-for="Apellido" class="form-control" required />
        <span asp-validation-for="Apellido" class="text-danger"></span>
    </div>

    <div class="form-group mt-2">
        <label asp-for="Edad"></label>
        <input asp-for="Edad" class="form-control" required type="number" min="0" />
        <span asp-validation-for="Edad" class="text-danger"></span>
    </div>

    <hr class="my-3" />
    <h5>Teléfonos</h5>

    <div id="phones-list">
        @if (Model.Telefonos != null && Model.Telefonos.Count > 0)
        {
            @for (var i = 0; i < Model.Telefonos.Count; i++)
            {
                <div class="card mb-2 phone-item">
                    <div class="card-body">
                        <input type="hidden" name="Telefonos[@i].Id" value="@Model.Telefonos[i].Id" />

                        <div class="row g-2 align-items-end">
                            <div class="col-md-6">
                                <label class="form-label" for="tel_num_@i">Número</label>
                                <input type="text"
                                       class="form-control"
                                       id="tel_num_@i"
                                       name="Telefonos[@i].Numero"
                                       value="@Model.Telefonos[i].Numero"
                                       placeholder="####-####"
                                       required />
                            </div>

                            <div class="col-md-4">
                                <label class="form-label" for="tel_tipo_@i">Tipo</label>
                                <select class="form-control"
                                        id="tel_tipo_@i"
                                        name="Telefonos[@i].Tipo"
                                        required>
                                    <option value="">-- Seleccione --</option>
                                    <option value="Móvil" selected="@(Model.Telefonos[i].Tipo == "Móvil" ? "selected" : null)">Móvil</option>
                                    <option value="Casa" selected="@(Model.Telefonos[i].Tipo == "Casa" ? "selected" : null)">Casa</option>
                                    <option value="Trabajo" selected="@(Model.Telefonos[i].Tipo == "Trabajo" ? "selected" : null)">Trabajo</option>
                                </select>
                            </div>

                            <div class="col-md-2 d-grid">
                                <button type="button" class="btn btn-outline-danger btn-remove-phone">Quitar</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <button type="button" id="btnAddPhone" class="btn btn-outline-secondary mt-2">
        Agregar Teléfono
    </button>

    <div class="mt-4">
        <button type="submit" name="action" value="save" class="btn btn-primary">
            Guardar
        </button>
        <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
    </div>
</form>

<template id="phone-template">
    <div class="card mb-2 phone-item">
        <div class="card-body">
            <input type="hidden" name="Telefonos[__index__].Id" value="0" />

            <div class="row g-2 align-items-end">
                <div class="col-md-6">
                    <label class="form-label">Número</label>
                    <input type="text"
                           class="form-control"
                           name="Telefonos[__index__].Numero"
                           placeholder="####-####"
                           required />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Tipo</label>
                    <select class="form-control"
                            name="Telefonos[__index__].Tipo"
                            required>
                        <option value="">-- Seleccione --</option>
                        <option value="Móvil">Móvil</option>
                        <option value="Casa">Casa</option>
                        <option value="Trabajo">Trabajo</option>
                    </select>
                </div>

                <div class="col-md-2 d-grid">
                    <button type="button" class="btn btn-outline-danger btn-remove-phone">Quitar</button>
                </div>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const btnAddPhone = document.getElementById("btnAddPhone");
            const phonesList = document.getElementById("phones-list");
            const phoneTemplate = document.getElementById("phone-template").innerHTML;
            const form = document.getElementById("frmCliente");

            function updatePhoneIndices() {
                const phoneItems = phonesList.querySelectorAll(".phone-item");
                phoneItems.forEach((item, index) => {
                    const indexInput = item.querySelector("input[name='Telefonos.Index']");
                    if (indexInput) indexInput.value = index;
                    item.querySelectorAll("[name]").forEach(input => {
                        input.name = input.name.replace(/\[\d+\]/, `[${index}]`);
                    });
                });
            }

            btnAddPhone.addEventListener("click", function () {
                const newIndex = phonesList.querySelectorAll(".phone-item").length;
                const newPhoneHtml = phoneTemplate.replace(/__index__/g, newIndex);
                const tempDiv = document.createElement("div");
                tempDiv.innerHTML = newPhoneHtml;
                phonesList.appendChild(tempDiv.firstElementChild);
                updatePhoneIndices();
            });

            phonesList.addEventListener("click", function (e) {
                if (e.target.classList.contains("btn-remove-phone")) {
                    const phoneItem = e.target.closest(".phone-item");
                    phoneItem.remove();
                    updatePhoneIndices();
                }
            });

            form.addEventListener("submit", async function (e) {
                const isValid = form.checkValidity();
                form.classList.add("was-validated");

                if (!isValid) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }

                e.preventDefault();
                const formData = new FormData(form);

                Swal.fire({
                    title: 'Guardando...',
                    text: 'Por favor espere un momento',
                    allowOutsideClick: false,
                    didOpen: () => Swal.showLoading()
                });

                try {
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Cliente actualizado',
                            text: 'El cliente se ha guardado correctamente',
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            window.location.href = '@Url.Action("Index", "Cliente")';
                        });
                    } else {
                        throw new Error("Error en el guardado");
                    }
                } catch {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Ocurrió un problema al guardar el cliente'
                    });
                }
            });
        });
    </script>
}
